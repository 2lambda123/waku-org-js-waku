// 19/WAKU2-LIGHTPUSH rfc: https://rfc.vac.dev/spec/19/
// Protocol identifier: /vac/waku/lightpush/2.0.0-beta1

// @generated by protoc-gen-es v1.1.1 with parameter "target=ts"
// @generated from file light_push.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { WakuMessage } from "./message_pb.js";

/**
 * @generated from message PushRequest
 */
export class PushRequest extends Message<PushRequest> {
  /**
   * @generated from field: string pubsub_topic = 1;
   */
  pubsubTopic = "";

  /**
   * @generated from field: WakuMessage message = 2;
   */
  message?: WakuMessage;

  constructor(data?: PartialMessage<PushRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "PushRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "pubsub_topic",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
    { no: 2, name: "message", kind: "message", T: WakuMessage },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): PushRequest {
    return new PushRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): PushRequest {
    return new PushRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): PushRequest {
    return new PushRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: PushRequest | PlainMessage<PushRequest> | undefined,
    b: PushRequest | PlainMessage<PushRequest> | undefined
  ): boolean {
    return proto3.util.equals(PushRequest, a, b);
  }
}

/**
 * @generated from message PushResponse
 */
export class PushResponse extends Message<PushResponse> {
  /**
   * @generated from field: bool is_success = 1;
   */
  isSuccess = false;

  /**
   * @generated from field: optional string info = 2;
   */
  info?: string;

  constructor(data?: PartialMessage<PushResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "PushResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    {
      no: 2,
      name: "info",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
      opt: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): PushResponse {
    return new PushResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): PushResponse {
    return new PushResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): PushResponse {
    return new PushResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: PushResponse | PlainMessage<PushResponse> | undefined,
    b: PushResponse | PlainMessage<PushResponse> | undefined
  ): boolean {
    return proto3.util.equals(PushResponse, a, b);
  }
}

/**
 * @generated from message PushRpc
 */
export class PushRpc extends Message<PushRpc> {
  /**
   * @generated from field: string request_id = 1;
   */
  requestId = "";

  /**
   * @generated from field: optional PushRequest request = 2;
   */
  request?: PushRequest;

  /**
   * @generated from field: optional PushResponse response = 3;
   */
  response?: PushResponse;

  constructor(data?: PartialMessage<PushRpc>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "PushRpc";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "request", kind: "message", T: PushRequest, opt: true },
    { no: 3, name: "response", kind: "message", T: PushResponse, opt: true },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): PushRpc {
    return new PushRpc().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): PushRpc {
    return new PushRpc().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): PushRpc {
    return new PushRpc().fromJsonString(jsonString, options);
  }

  static equals(
    a: PushRpc | PlainMessage<PushRpc> | undefined,
    b: PushRpc | PlainMessage<PushRpc> | undefined
  ): boolean {
    return proto3.util.equals(PushRpc, a, b);
  }
}
