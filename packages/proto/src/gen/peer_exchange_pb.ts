// @generated by protoc-gen-es v1.1.1 with parameter "target=ts"
// @generated from file peer_exchange.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message PeerInfo
 */
export class PeerInfo extends Message<PeerInfo> {
  /**
   * @generated from field: optional bytes enr = 1;
   */
  enr?: Uint8Array;

  constructor(data?: PartialMessage<PeerInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "PeerInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "enr",
      kind: "scalar",
      T: 12 /* ScalarType.BYTES */,
      opt: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): PeerInfo {
    return new PeerInfo().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): PeerInfo {
    return new PeerInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): PeerInfo {
    return new PeerInfo().fromJsonString(jsonString, options);
  }

  static equals(
    a: PeerInfo | PlainMessage<PeerInfo> | undefined,
    b: PeerInfo | PlainMessage<PeerInfo> | undefined
  ): boolean {
    return proto3.util.equals(PeerInfo, a, b);
  }
}

/**
 * @generated from message PeerExchangeQuery
 */
export class PeerExchangeQuery extends Message<PeerExchangeQuery> {
  /**
   * number of peers requested
   *
   * @generated from field: optional uint64 numPeers = 1;
   */
  numPeers?: bigint;

  constructor(data?: PartialMessage<PeerExchangeQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "PeerExchangeQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "numPeers",
      kind: "scalar",
      T: 4 /* ScalarType.UINT64 */,
      opt: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): PeerExchangeQuery {
    return new PeerExchangeQuery().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): PeerExchangeQuery {
    return new PeerExchangeQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): PeerExchangeQuery {
    return new PeerExchangeQuery().fromJsonString(jsonString, options);
  }

  static equals(
    a: PeerExchangeQuery | PlainMessage<PeerExchangeQuery> | undefined,
    b: PeerExchangeQuery | PlainMessage<PeerExchangeQuery> | undefined
  ): boolean {
    return proto3.util.equals(PeerExchangeQuery, a, b);
  }
}

/**
 * @generated from message PeerExchangeResponse
 */
export class PeerExchangeResponse extends Message<PeerExchangeResponse> {
  /**
   * @generated from field: repeated PeerInfo peerInfos = 1;
   */
  peerInfos: PeerInfo[] = [];

  constructor(data?: PartialMessage<PeerExchangeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "PeerExchangeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "peerInfos", kind: "message", T: PeerInfo, repeated: true },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): PeerExchangeResponse {
    return new PeerExchangeResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): PeerExchangeResponse {
    return new PeerExchangeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): PeerExchangeResponse {
    return new PeerExchangeResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: PeerExchangeResponse | PlainMessage<PeerExchangeResponse> | undefined,
    b: PeerExchangeResponse | PlainMessage<PeerExchangeResponse> | undefined
  ): boolean {
    return proto3.util.equals(PeerExchangeResponse, a, b);
  }
}

/**
 * @generated from message PeerExchangeRPC
 */
export class PeerExchangeRPC extends Message<PeerExchangeRPC> {
  /**
   * @generated from field: optional PeerExchangeQuery query = 1;
   */
  query?: PeerExchangeQuery;

  /**
   * @generated from field: optional PeerExchangeResponse response = 2;
   */
  response?: PeerExchangeResponse;

  constructor(data?: PartialMessage<PeerExchangeRPC>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "PeerExchangeRPC";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "message", T: PeerExchangeQuery, opt: true },
    {
      no: 2,
      name: "response",
      kind: "message",
      T: PeerExchangeResponse,
      opt: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): PeerExchangeRPC {
    return new PeerExchangeRPC().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): PeerExchangeRPC {
    return new PeerExchangeRPC().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): PeerExchangeRPC {
    return new PeerExchangeRPC().fromJsonString(jsonString, options);
  }

  static equals(
    a: PeerExchangeRPC | PlainMessage<PeerExchangeRPC> | undefined,
    b: PeerExchangeRPC | PlainMessage<PeerExchangeRPC> | undefined
  ): boolean {
    return proto3.util.equals(PeerExchangeRPC, a, b);
  }
}
