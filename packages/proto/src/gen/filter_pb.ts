// 12/WAKU2-FILTER rfc: https://rfc.vac.dev/spec/12/
// Protocol identifier: /vac/waku/filter/2.0.0-beta1

// @generated by protoc-gen-es v1.1.1 with parameter "target=ts"
// @generated from file filter.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { WakuMessage } from "./message_pb.js";

/**
 * @generated from message FilterRequest
 */
export class FilterRequest extends Message<FilterRequest> {
  /**
   * @generated from field: bool subscribe = 1;
   */
  subscribe = false;

  /**
   * @generated from field: string topic = 2;
   */
  topic = "";

  /**
   * @generated from field: repeated FilterRequest.ContentFilter content_filters = 3;
   */
  contentFilters: FilterRequest_ContentFilter[] = [];

  constructor(data?: PartialMessage<FilterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "FilterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscribe", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "topic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    {
      no: 3,
      name: "content_filters",
      kind: "message",
      T: FilterRequest_ContentFilter,
      repeated: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): FilterRequest {
    return new FilterRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): FilterRequest {
    return new FilterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): FilterRequest {
    return new FilterRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: FilterRequest | PlainMessage<FilterRequest> | undefined,
    b: FilterRequest | PlainMessage<FilterRequest> | undefined
  ): boolean {
    return proto3.util.equals(FilterRequest, a, b);
  }
}

/**
 * @generated from message FilterRequest.ContentFilter
 */
export class FilterRequest_ContentFilter extends Message<FilterRequest_ContentFilter> {
  /**
   * @generated from field: string content_topic = 1;
   */
  contentTopic = "";

  constructor(data?: PartialMessage<FilterRequest_ContentFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "FilterRequest.ContentFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "content_topic",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): FilterRequest_ContentFilter {
    return new FilterRequest_ContentFilter().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): FilterRequest_ContentFilter {
    return new FilterRequest_ContentFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): FilterRequest_ContentFilter {
    return new FilterRequest_ContentFilter().fromJsonString(
      jsonString,
      options
    );
  }

  static equals(
    a:
      | FilterRequest_ContentFilter
      | PlainMessage<FilterRequest_ContentFilter>
      | undefined,
    b:
      | FilterRequest_ContentFilter
      | PlainMessage<FilterRequest_ContentFilter>
      | undefined
  ): boolean {
    return proto3.util.equals(FilterRequest_ContentFilter, a, b);
  }
}

/**
 * @generated from message MessagePush
 */
export class MessagePush extends Message<MessagePush> {
  /**
   * @generated from field: repeated WakuMessage messages = 1;
   */
  messages: WakuMessage[] = [];

  constructor(data?: PartialMessage<MessagePush>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MessagePush";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "messages",
      kind: "message",
      T: WakuMessage,
      repeated: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): MessagePush {
    return new MessagePush().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): MessagePush {
    return new MessagePush().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): MessagePush {
    return new MessagePush().fromJsonString(jsonString, options);
  }

  static equals(
    a: MessagePush | PlainMessage<MessagePush> | undefined,
    b: MessagePush | PlainMessage<MessagePush> | undefined
  ): boolean {
    return proto3.util.equals(MessagePush, a, b);
  }
}

/**
 * @generated from message FilterRpc
 */
export class FilterRpc extends Message<FilterRpc> {
  /**
   * @generated from field: string request_id = 1;
   */
  requestId = "";

  /**
   * @generated from field: optional FilterRequest request = 2;
   */
  request?: FilterRequest;

  /**
   * @generated from field: optional MessagePush push = 3;
   */
  push?: MessagePush;

  constructor(data?: PartialMessage<FilterRpc>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "FilterRpc";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "request", kind: "message", T: FilterRequest, opt: true },
    { no: 3, name: "push", kind: "message", T: MessagePush, opt: true },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): FilterRpc {
    return new FilterRpc().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): FilterRpc {
    return new FilterRpc().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): FilterRpc {
    return new FilterRpc().fromJsonString(jsonString, options);
  }

  static equals(
    a: FilterRpc | PlainMessage<FilterRpc> | undefined,
    b: FilterRpc | PlainMessage<FilterRpc> | undefined
  ): boolean {
    return proto3.util.equals(FilterRpc, a, b);
  }
}
