// @generated by protoc-gen-es v1.1.1 with parameter "target=ts"
// @generated from file topic_only_message.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message TopicOnlyMessage
 */
export class TopicOnlyMessage extends Message<TopicOnlyMessage> {
  /**
   * @generated from field: string content_topic = 2;
   */
  contentTopic = "";

  constructor(data?: PartialMessage<TopicOnlyMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "TopicOnlyMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 2,
      name: "content_topic",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): TopicOnlyMessage {
    return new TopicOnlyMessage().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): TopicOnlyMessage {
    return new TopicOnlyMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): TopicOnlyMessage {
    return new TopicOnlyMessage().fromJsonString(jsonString, options);
  }

  static equals(
    a: TopicOnlyMessage | PlainMessage<TopicOnlyMessage> | undefined,
    b: TopicOnlyMessage | PlainMessage<TopicOnlyMessage> | undefined
  ): boolean {
    return proto3.util.equals(TopicOnlyMessage, a, b);
  }
}
