// 14/WAKU2-MESSAGE rfc: https://rfc.vac.dev/spec/14/

// @generated by protoc-gen-es v1.1.1 with parameter "target=ts"
// @generated from file message.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message RateLimitProof
 */
export class RateLimitProof extends Message<RateLimitProof> {
  /**
   * @generated from field: bytes proof = 1;
   */
  proof = new Uint8Array(0);

  /**
   * @generated from field: bytes merkle_root = 2;
   */
  merkleRoot = new Uint8Array(0);

  /**
   * @generated from field: bytes epoch = 3;
   */
  epoch = new Uint8Array(0);

  /**
   * @generated from field: bytes share_x = 4;
   */
  shareX = new Uint8Array(0);

  /**
   * @generated from field: bytes share_y = 5;
   */
  shareY = new Uint8Array(0);

  /**
   * @generated from field: bytes nullifier = 6;
   */
  nullifier = new Uint8Array(0);

  /**
   * @generated from field: bytes rln_identifier = 7;
   */
  rlnIdentifier = new Uint8Array(0);

  constructor(data?: PartialMessage<RateLimitProof>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "RateLimitProof";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proof", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    {
      no: 2,
      name: "merkle_root",
      kind: "scalar",
      T: 12 /* ScalarType.BYTES */,
    },
    { no: 3, name: "epoch", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "share_x", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "share_y", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "nullifier", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    {
      no: 7,
      name: "rln_identifier",
      kind: "scalar",
      T: 12 /* ScalarType.BYTES */,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): RateLimitProof {
    return new RateLimitProof().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): RateLimitProof {
    return new RateLimitProof().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): RateLimitProof {
    return new RateLimitProof().fromJsonString(jsonString, options);
  }

  static equals(
    a: RateLimitProof | PlainMessage<RateLimitProof> | undefined,
    b: RateLimitProof | PlainMessage<RateLimitProof> | undefined
  ): boolean {
    return proto3.util.equals(RateLimitProof, a, b);
  }
}

/**
 * @generated from message WakuMessage
 */
export class WakuMessage extends Message<WakuMessage> {
  /**
   * @generated from field: bytes payload = 1;
   */
  payload = new Uint8Array(0);

  /**
   * @generated from field: string content_topic = 2;
   */
  contentTopic = "";

  /**
   * @generated from field: optional uint32 version = 3;
   */
  version?: number;

  /**
   * @generated from field: optional sint64 timestamp = 10;
   */
  timestamp?: bigint;

  /**
   * @generated from field: optional bytes meta = 11;
   */
  meta?: Uint8Array;

  /**
   * @generated from field: optional RateLimitProof rate_limit_proof = 21;
   */
  rateLimitProof?: RateLimitProof;

  /**
   * @generated from field: optional bool ephemeral = 31;
   */
  ephemeral?: boolean;

  constructor(data?: PartialMessage<WakuMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "WakuMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "payload", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    {
      no: 2,
      name: "content_topic",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 3,
      name: "version",
      kind: "scalar",
      T: 13 /* ScalarType.UINT32 */,
      opt: true,
    },
    {
      no: 10,
      name: "timestamp",
      kind: "scalar",
      T: 18 /* ScalarType.SINT64 */,
      opt: true,
    },
    {
      no: 11,
      name: "meta",
      kind: "scalar",
      T: 12 /* ScalarType.BYTES */,
      opt: true,
    },
    {
      no: 21,
      name: "rate_limit_proof",
      kind: "message",
      T: RateLimitProof,
      opt: true,
    },
    {
      no: 31,
      name: "ephemeral",
      kind: "scalar",
      T: 8 /* ScalarType.BOOL */,
      opt: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): WakuMessage {
    return new WakuMessage().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): WakuMessage {
    return new WakuMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): WakuMessage {
    return new WakuMessage().fromJsonString(jsonString, options);
  }

  static equals(
    a: WakuMessage | PlainMessage<WakuMessage> | undefined,
    b: WakuMessage | PlainMessage<WakuMessage> | undefined
  ): boolean {
    return proto3.util.equals(WakuMessage, a, b);
  }
}
