pipeline {
  agent { label 'linux' }

  options {
    disableConcurrentBuilds()
    /* manage how many builds we keep */
    buildDiscarder(logRotator(
      numToKeepStr: '20',
      daysToKeepStr: '30',
    ))
  }

  environment {
    GIT_AUTHOR_NAME = 'status-im-auto'
    GIT_AUTHOR_EMAIL = 'auto@status.im'
    PUPPETEER_SKIP_DOWNLOAD = 'true'
  }

  stages {
    stage('Deps') {
      steps {
        sh 'npm ci'
      }
    }

    stage('Build doc') {
      steps {
        sh 'npm run doc'
      }
    }

    stage('Build') {
      steps {
        sh 'npm run build'
      }
    }

    stage('Examples') {
      steps {
        script {
          parallel genExampleBuilds([
            'js-waku', 'web-chat', 'eth-pm', 'eth-pm-wallet'
          ])
        }
      }
    }

    stage('Publish') {
      when { expression { GIT_BRANCH.endsWith('build-examples') } }
      steps { script {
        sshagent(credentials: ['status-im-auto-ssh']) {
          sh 'npm run deploy'
        }
      } }
    }
  }
  post {
    always { cleanWs() }
  }
}

def genExampleBuilds(examples) {
  def parallelStages = [:]
  for (example in examples) {
    parallelStages[example] = {
      stage(example) {
        dir("examples/${example}") {
          def destDir = "${WORKSPACE}/build/docs/examples/${example}"
          sh 'npm ci'
          sh 'npm run build'
          sh "mkdir -p ${destDir}"
          sh "cp -r build/. ${destDir}"
          sh 'ls -l build'
          sh "ls -l ${WORKSPACE}/build/docs"
          sh "ls -l ${WORKSPACE}/build/docs/examples"
        }
      }
    }
  }
  return parallelStages
}
